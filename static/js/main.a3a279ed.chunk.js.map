{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","state","data","story","nightPhrase","dayPhrase","latinPhrase","latinPhrase2","database","ref","on","snapshot","storyData","val","console","log","strings","Object","values","dayArray","latinArray","nightArray","randomDayString","Math","floor","random","length","randomNightString","randomLatinString","setState","className","this","htmlFor","name","id","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAaAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,6CAKIR,QAAf,EC2FeS,G,kBApGb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,KAAM,GACNC,MAAO,GACPC,YAAa,GACbC,UAAW,GACXC,YAAa,GACbC,aAAc,oCARJ,E,iFAcO,IAAD,OACJhB,EAASiB,WAAWC,MAE5BC,GAAG,SAAS,SAACC,GAEjB,IAAMC,EAAYD,EAASE,MAC3BC,QAAQC,IAAI,+BAAgCH,GAE5C,IAAMI,EAAUC,OAAOC,OAAON,GAC9BE,QAAQC,IAAI,yBAAyBC,GAErC,IAAMG,EAAWH,EAAQ,GACnBI,EAAaJ,EAAQ,GACrBK,EAAaL,EAAQ,GAE3BF,QAAQC,IAAI,sBAAuBM,GACnCP,QAAQC,IAAI,oBAAqBI,GACjCL,QAAQC,IAAI,kBAAmBK,GAI/B,IACME,EAAkBH,EADAI,KAAKC,MAAMD,KAAKE,OAAON,GAAYA,EAASO,SAEpEZ,QAAQC,IAAI,kCAAmCO,GAE/C,IACMK,EAAoBN,EADAE,KAAKC,MAAMD,KAAKE,OAAOJ,GAAcA,EAAWK,SAE1EZ,QAAQC,IAAI,kCAAmCY,GAE/C,IACMC,EAAoBR,EADAG,KAAKC,MAAMD,KAAKE,OAAOL,GAAcA,EAAWM,SAE1EZ,QAAQC,IAAI,kCAAmCa,GAG/Cd,QAAQC,IAAI,uCAAwCa,GAEpD,EAAKC,SAAS,CACZ3B,KAAMU,EACNR,YAAauB,EACbtB,UAAWiB,EACXhB,YAAasB,S,+BAQjB,OAEE,yBAAKE,UAAU,OAGb,iDACA,mQAGA,2BAEIC,KAAK9B,MAAMG,aAMf,2BAAO4B,QAAQ,aAAf,2BACA,4BAAQC,KAAK,aAAaC,GAAG,aAC3B,4BAAQC,MAAM,OAAd,WACA,4BAAQA,MAAM,SAAd,cAGF,2BAAOH,QAAQ,eAAf,gDACA,4BAAQC,KAAK,iBAAiBC,GAAG,eAC/B,4BAAQC,MAAM,SAAd,mCACA,4BAAQA,MAAM,UAAd,yBACA,4BAAQA,MAAM,SAAd,gC,GA1FQC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a3a279ed.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/database'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC7pYV3comYGDCKAksj4Ur7D8fiAAFrz_c\",\n    authDomain: \"trippy-tincture.firebaseapp.com\",\n    databaseURL: \"https://trippy-tincture.firebaseio.com\",\n    projectId: \"trippy-tincture\",\n    storageBucket: \"trippy-tincture.appspot.com\",\n    messagingSenderId: \"15453813353\",\n    appId: \"1:15453813353:web:569a3e3f144a509270c0f8\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase","import React, { Component } from 'react';\nimport firebase from './firebase'\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: {},\n      story: [],\n      nightPhrase: '',\n      dayPhrase: '',\n      latinPhrase: '',\n      latinPhrase2: 'this is a placeholder in english',\n      \n    }\n  }\n\n  // Connecting application to firebase database where I have objects stored that hold information that adds to the story\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    // console.log(dbRef)\n    dbRef.on('value', (snapshot) => {\n      // make a variable that would refer to our firebase data\n      const storyData = snapshot.val()\n      console.log('this is seeing the high data', storyData)\n\n      const strings = Object.values(storyData)\n      console.log('this is the story data',strings)\n      // view the data we have in firebase on our console.log \n      const dayArray = strings[0];\n      const latinArray = strings[1];\n      const nightArray = strings[2];\n\n      console.log('the nighttime array', nightArray)\n      console.log('the daytime array', dayArray)\n      console.log('the latin array', latinArray)\n      \n\n\n      const randomDayIndex = (Math.floor(Math.random(dayArray) * dayArray.length))\n      const randomDayString = dayArray[randomDayIndex]\n      console.log('this is the random day sentence', randomDayString)\n\n      const randomNightIndex = (Math.floor(Math.random(nightArray) * nightArray.length))\n      const randomNightString = nightArray[randomNightIndex]\n      console.log('this is a random night sentence', randomNightString)\n\n      const randomLatinIndex = (Math.floor(Math.random(latinArray) * latinArray.length))\n      const randomLatinString = latinArray[randomLatinIndex]\n      console.log('this is the random latin string', randomLatinString)\n\n\n      console.log('another instance of a latin sentence', randomLatinString)\n      \n      this.setState({\n        data: storyData,\n        nightPhrase: randomNightString,\n        dayPhrase: randomDayString,\n        latinPhrase: randomLatinString\n      })\n\n    })\n\n    \n  }\n  render() {\n    return(\n      \n      <div className=\"App\">\n        {/* Enlightenment story is told here, where information retrived from my firebase database will append */}\n        \n        <h1>~Trippy Tincture~</h1>\n        <h3> \n          Your friend, a holistic nutritionist, made you an herbal tincture meant to help reduce your stress levels. You decide to enjoy the clear weather by heading to your favourite park right after having a some drops of the tincture.\n      </h3>\n        <p>\n          {\n            this.state.nightPhrase\n          }\n        </p>\n        \n        {/* Questions. When answered, they will add on to the story */}\n        \n        <label htmlFor=\"timeOfDay\">What's the time of day?</label>\n        <select name=\"dayOrNight\" id=\"timeOfDay\">\n          <option value=\"day\">Daytime</option>\n          <option value=\"night\">Nighttime</option>\n        </select>\n\n        <label htmlFor=\"amountTaken\">How many drops of the tincture did you have?</label>\n        <select name=\"takenSelection\" id=\"amountTaken\">\n          <option value=\"small\">Just a little, I know my limits</option>\n          <option value=\"medium\">An appropriate amount</option>\n          <option value=\"large\">I may have overdone it</option>\n        </select>\n        \n        {/* Will import a component here that is used to randomize all the information into a storyline. This component will be the story to be appended to the page.  */}\n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}